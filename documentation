Phoronix Test Suite Automation
==============================

Welcome to the Phoronix Test Suite Automation project! This project automates the setup and execution of the Phoronix Test Suite (PTS) for benchmarking. It includes a Makefile with various targets to streamline the process of installing prerequisites, configuring test runs, saving configurations, running tests, and cleaning up results.

Description
-----------
•  pts/nginx		: This benchmark measures the performance of the Nginx web server, focusing on handling concurrent web requests, throughput, and response times.

•  pts/pgbench		: Pgbench is a benchmarking tool for PostgreSQL. It simulates various database operations to measure the performance of PostgreSQL databases, focusing on transaction processing performance.

•  pts/pgbench          : Stress NG is a tool for stress testing a computer system. It loads and exercises various components (CPU, memory, I/O, etc.) to assess system stability and performance under heavy load.

•  pts/redis		: The Redis benchmark evaluates the performance of Redis, an in-memory data structure store. It measures throughput and latency for various data operations. 

•  pts/openssl		: The OpenSSL benchmark evaluates the cryptographic performance of a system by testing the speed of various encryption and decryption operations.

•  pts/sysbench		: Sysbench is a multi-purpose benchmark tool used to evaluate the performance of the CPU, memory, I/O, and database systems. It is commonly used for MySQL performance testing.

•  pts/pennant		: Pennant is a benchmark tool for assessing high-performance computing (HPC) systems. It focuses on computational fluid dynamics (CFD) and other scientific computing workloads.

•  pts/memcached	: The Memcached benchmark evaluates the performance of Memcached, a distributed memory caching system. It measures the speed of storing and retrieving data from the cache.

•  pts/hadoop		: This benchmark measures the performance of Apache Hadoop, focusing on its ability to handle large-scale data processing tasks across distributed computing resources.

Getting Started
---------------

Follow the instructions below to set up and use the automation scripts.

Prerequisites
-------------

Ensure you have `make` installed on your system. The Makefile will handle the rest of the dependencies based on your Linux distribution.

Workflow
--------

1. Copy and paste the `jenkins_pipeline` code in jenkins groovy script console.
2. `Apply` and `Save`.
3. Choose `Build with Parameters`.
4. Configure options and Click on `build`.

Author
------

- Name: Hemanth Selam
- Email: hemanth.selam@gmail.com
